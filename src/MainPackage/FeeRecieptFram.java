/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MainPackage;

import Classes.FeeReceipt;
import Classes.MonthlyReport;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import org.apache.commons.lang3.ArrayUtils;

/**
 *
 * @author Moheb
 */
public class FeeRecieptFram extends javax.swing.JDialog {

   public Connection conn() {
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = "jdbc:sqlserver://localhost:49172;"
                    + "databaseName=sscc;user=sa;password=sa9";
            return DriverManager.getConnection(url);
        } catch (SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, "An error occured while Connecting to Database.");
        }
        return null;
    }
    
    String[] str = {"January",      
   "February",
   "March",        
   "April",        
   "May",          
   "June",         
   "July",         
   "August",       
   "September",    
   "October",      
   "November",     
   "December"};
    
    Connection con;
    PreparedStatement ps;
    ResultSet rs;
    int  admission_date, date_cur, current_month, test_passed = 0, actual_fee = 0, final_fee, fee_paid, debt, year, count = -1;
    String fee_package = null, father = null, current_date;
    String sprevious_year, scurrent_year, sprevious_month, scurrent_month, sprevious_date, scurrent_date;

    public FeeRecieptFram(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        con = conn();

        try {
            ps = con.prepareStatement("select distinct Class from Basic_info order by Class");
            rs = ps.executeQuery();
            while (rs.next()) {
                Cclass.addItem(rs.getString(1));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
        }

        Tname.setEditable(false);
        Tfee.setEditable(false);
        Tcalfee.setEditable(false);
        Ttestpassed.setEditable(false);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Lroll = new javax.swing.JLabel();
        Lname = new javax.swing.JLabel();
        Lclass = new javax.swing.JLabel();
        Lfee = new javax.swing.JLabel();
        Croll = new javax.swing.JComboBox<>();
        Cclass = new javax.swing.JComboBox<>();
        Tname = new javax.swing.JTextField();
        Tfee = new javax.swing.JTextField();
        Lfeepaid = new javax.swing.JLabel();
        Tcalfee = new javax.swing.JTextField();
        Bprint = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        Ttestpassed = new javax.swing.JTextField();
        Lpayment = new javax.swing.JLabel();
        Tpaidamount = new javax.swing.JTextField();
        Ldate = new javax.swing.JLabel();
        Date = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        Lroll.setText("Roll Number");

        Lname.setText("Name");

        Lclass.setText("Class");

        Lfee.setText("Actual Fee");

        Croll.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Roll Number" }));
        Croll.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CrollItemStateChanged(evt);
            }
        });
        Croll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrollActionPerformed(evt);
            }
        });

        Cclass.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Class" }));
        Cclass.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CclassItemStateChanged(evt);
            }
        });
        Cclass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CclassActionPerformed(evt);
            }
        });

        Tname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TnameActionPerformed(evt);
            }
        });

        Tfee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TfeeActionPerformed(evt);
            }
        });

        Lfeepaid.setText("Calculated Fee");

        Tcalfee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TcalfeeActionPerformed(evt);
            }
        });

        Bprint.setText("Print");
        Bprint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BprintActionPerformed(evt);
            }
        });

        jLabel1.setText("Test Passed");

        Lpayment.setText("Paid Amount");

        Tpaidamount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TpaidamountActionPerformed(evt);
            }
        });

        Ldate.setText("Date ");

        Date.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                DatePropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Bprint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Lfee)
                            .addComponent(Lpayment)
                            .addComponent(Ldate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Lfeepaid)
                                .addGap(88, 88, 88)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Tpaidamount, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(Tcalfee, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                                        .addComponent(Ttestpassed, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(Tfee, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(Date, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Lroll)
                            .addComponent(Lname, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Lclass))
                        .addGap(61, 61, 61)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Cclass, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Croll, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Tname))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Lclass)
                    .addComponent(Cclass, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Croll, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Lroll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Tname, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Lname, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Ldate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Date, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Lfee)
                    .addComponent(Tfee, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Lfeepaid, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Tcalfee, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Ttestpassed, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(Lpayment))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(Tpaidamount, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Bprint, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CrollItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CrollItemStateChanged
        
        //Cmonth.removeAllItems();
        //Cmonth.addItem("Select Month");
        Tfee.setText(null);
        Tcalfee.setText(null);
        Ttestpassed.setText(null);
        Tpaidamount.setText(null);
        Date.setDate(null);
            
            try {
            ps = con.prepareStatement("select Name from Basic_info where Class='" + Cclass.getSelectedItem() + "' and Roll_No="+Croll.getSelectedItem());
            rs = ps.executeQuery();
            while (rs.next()) {
                Tname.setText(rs.getString(1));
                }
            } catch (SQLException ex) {
            } 
            
            /*try {
            ps = con.prepareStatement("select distinct MONTH(Date_of_Entry) from Fee_Info where Class='" + Cclass.getSelectedItem() + "' and Roll_No="+Croll.getSelectedItem());
            rs = ps.executeQuery();
                while (rs.next()) {
                    Cmonth.addItem(str[Integer.parseInt(rs.getString(1)) - 1]);
                }
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
            }*/
        
    }//GEN-LAST:event_CrollItemStateChanged

    private void CclassItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CclassItemStateChanged
        
        
            Croll.removeAllItems();
            Croll.addItem("Select Roll Number"); 
            Tfee.setText(null);
            Tcalfee.setText(null);
            Ttestpassed.setText(null);
            Tpaidamount.setText(null);
            Tname.setText(null);
            Date.setDate(null);
            
            try {
            ps = con.prepareStatement("select DISTINCT Roll_No from Basic_info where Class='" + Cclass.getSelectedItem() + "' order by  Roll_No ASC");
            rs = ps.executeQuery();
            while (rs.next()) {
                Croll.addItem(rs.getString(1));
                }
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
            }
        
        CrollItemStateChanged(evt);
        
        
    }//GEN-LAST:event_CclassItemStateChanged

    private void CclassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CclassActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CclassActionPerformed

    private void TnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TnameActionPerformed
        
    }//GEN-LAST:event_TnameActionPerformed

    private void TfeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TfeeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TfeeActionPerformed

    private void TcalfeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TcalfeeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TcalfeeActionPerformed

    private void BprintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BprintActionPerformed
        actual_fee = Integer.parseInt(Tfee.getText());
        final_fee = Integer.parseInt(Tcalfee.getText());
        fee_paid = Integer.parseInt(Tpaidamount.getText());
        debt = final_fee - fee_paid;
        
        
        if(Integer.parseInt(Tpaidamount.getText()) > Integer.parseInt(Tcalfee.getText()))
        {
            JOptionPane.showMessageDialog(rootPane, "Please Input Correct Amount");
            return;
        }
        
        
        try {
            ps = con.prepareStatement("select Father_Name from Basic_info where Roll_No = "+Croll.getSelectedItem()+" and Class ='"+Cclass.getSelectedItem()+"'");
            rs = ps.executeQuery();
            while (rs.next()) {
                father = rs.getString(1);
                } 
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
        }
        
        if (count == 0)
        { 
            int check_previous_data = -1;
            try {              
                ps = con.prepareStatement("select count(Roll_No) from Fee_Info where Roll_No ="+Croll.getSelectedItem()+" and Class='"+Cclass.getSelectedItem()+"' and Month(Date_of_Entry) = "+scurrent_month+" and Year(Date_of_Entry) = "+scurrent_year);
                rs = ps.executeQuery();
                while (rs.next()) {
                    check_previous_data = rs.getInt(1);
                }
            }
            catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
            }
            
            if (check_previous_data == 1)
            {
                try {
                ps = con.prepareStatement("update Fee_Info set Fee_Paid ="+fee_paid+", Fee_Debt ="+debt+", Calculated_Fee ="+Tcalfee.getText()+", Date_of_Entry ='"+current_date+"', Test_Passed="+test_passed+" where Roll_No ="+Croll.getSelectedItem()+" and Class='"+Cclass.getSelectedItem()+"' and Month(Date_of_Entry) = "+scurrent_month+" and Year(Date_of_Entry) = "+scurrent_year);
                ps.execute();

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());                   
                }
            }
            else if (check_previous_data == 0)
            {
                try{
                ps = con.prepareStatement("INSERT INTO Fee_Info(Roll_No,Name,Father_Name,Class,Date_of_Entry,Test_Passed,Fee_Package,Actual_Fee,Calculated_Fee,Fee_Paid,Fee_Debt) values("+Croll.getSelectedItem()+",'"+Tname.getText()+"','"+father+"','"+Cclass.getSelectedItem()+"','"+current_date+"',"+test_passed+",'"+fee_package+"',"+actual_fee+","+final_fee+","+fee_paid+","+debt+")");
                ps.execute();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
                } 
            }
        }
        else if (count == 1)
        {
            try {
            ps = con.prepareStatement("update Fee_Info set Fee_Paid ="+fee_paid+", Fee_Debt ="+debt+" where Roll_No = "+Croll.getSelectedItem()+" and Class ='"+Cclass.getSelectedItem()+"' and Date_of_Entry = '"+current_date+"'");
            ps.execute();
              
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());                   
            }
        }
                
        
            
            
            this.setVisible(false);
            FeeReceipt report = new FeeReceipt();
            report.showReport("src/Reports/FeeReceipt.jrxml", "Fee Reciept",Tname.getText(),father,final_fee,Integer.parseInt(Croll.getSelectedItem().toString()),Cclass.getSelectedItem().toString(),fee_package,fee_paid,debt);
            
            Tfee.setText(null);
            Tcalfee.setText(null);
            Ttestpassed.setText(null);
            Tpaidamount.setText(null);
            Croll.setSelectedIndex(0);
            Date.setDate(null);
       
    }//GEN-LAST:event_BprintActionPerformed
   
    
    private void TpaidamountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TpaidamountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TpaidamountActionPerformed

    private void CrollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrollActionPerformed

    }//GEN-LAST:event_CrollActionPerformed

    private void DatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_DatePropertyChange
        String date;
        
        Tfee.setText(null);
        Tcalfee.setText(null);
        Ttestpassed.setText(null);
        Tpaidamount.setText(null);
        
        if(Date.getDate() != null)
        {
            SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd");
            date = ft.format(Date.getDate());
            
            current_date = date;
            String[] y_m_d = current_date.split("-");
            year = Integer.parseInt(y_m_d[0]);
            current_month = Integer.parseInt(y_m_d[1]);
            date_cur = Integer.parseInt(y_m_d[2]); 
            
            try {

                ps = con.prepareStatement("select COUNT(Roll_No)from Fee_Info where Roll_No = '"+Croll.getSelectedItem()+"' and Class = '"+Cclass.getSelectedItem()+"' and Date_of_Entry = '"+date+"'");
                rs = ps.executeQuery();
                while (rs.next()) {
                    count = rs.getInt(1);
                    }      
                }
                catch (SQLException ex) {
                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
                }
            
            if(count == 1)
            {
                try {

                ps = con.prepareStatement("select Fee from Basic_info where Roll_No ="+Croll.getSelectedItem()+"and Class = '"+Cclass.getSelectedItem()+"'");
                rs = ps.executeQuery();
                while (rs.next()) {
                    Tfee.setText(rs.getString(1));                   
                }
                }
                catch (SQLException ex) {
                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
                }
                
                try {

                ps = con.prepareStatement("select Fee_Package from Basic_info where Roll_No = "+Croll.getSelectedItem()+" and Class = '"+Cclass.getSelectedItem()+"'");
                rs = ps.executeQuery();
                while (rs.next()) {
                    fee_package = rs.getString(1);
                }
                }
                catch (SQLException ex) {
                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
                }
                
                try {

                ps = con.prepareStatement("select Fee_Paid from Fee_Info where Roll_No = "+Croll.getSelectedItem()+" and Class = '"+Cclass.getSelectedItem()+"' and Date_of_Entry = '"+date+"'");
                rs = ps.executeQuery();
                while (rs.next()) {
                    Tpaidamount.setText(rs.getString(1));
                }
                }
                catch (SQLException ex) {
                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
                }
                
                if("Fixed".equals(fee_package))
                {
                   Tcalfee.setText(Tfee.getText());
                   Ttestpassed.setText("Not Required");
                }
                else if ("Flexible".equals(fee_package))
                {
                    try {

                    ps = con.prepareStatement("select Calculated_Fee, Test_Passed from Fee_Info where Name = '"+Tname.getText()+"' and Roll_No ="+Croll.getSelectedItem()+" and Class = '"+Cclass.getSelectedItem()+"' and Date_of_Entry = '"+date+"'");
                    rs = ps.executeQuery();
                    while (rs.next()) {
                        Tcalfee.setText(rs.getString(1)); 
                        Ttestpassed.setText(rs.getString(2));
                        }      
                    }
                    catch (SQLException ex) {
                        JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
                    }
                } 

                }
                else if (count == 0)
                {
                    int check_previous_data = -1;
                    try {              
                    ps = con.prepareStatement("select count(Roll_No) from Fee_Info where Roll_No ="+Croll.getSelectedItem()+" and Class='"+Cclass.getSelectedItem()+"' and Month(Date_of_Entry) = "+scurrent_month+" and Year(Date_of_Entry) = "+scurrent_year);
                    rs = ps.executeQuery();
                    while (rs.next()) {
                            check_previous_data = rs.getInt(1);
                        }
                    }
                    catch (SQLException ex) {
                        JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
                    }
                    
                    
                    try {                    
                        ps = con.prepareStatement("select day(Date_of_admission), Fee_Package, Fee from Basic_info where Class='"+Cclass.getSelectedItem()+"' and Roll_No="+Croll.getSelectedItem());
                        rs = ps.executeQuery();

                        while (rs.next()) {
                            admission_date = rs.getInt(1);
                            fee_package = rs.getString(2);
                            Tfee.setText(rs.getString(3));
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
                    } 



                    if (current_month == 01)
                    {
                        sprevious_month = "12";
                        scurrent_month = "0"+Integer.toString(current_month);
                        sprevious_year = Integer.toString(year - 1);
                        scurrent_year = Integer.toString(year);
                        sprevious_date = Integer.toString(admission_date);
                        scurrent_date = Integer.toString(date_cur);

                    }
                    else if (current_month == 11 || current_month == 12)
                    {
                        sprevious_month = Integer.toString(current_month - 1);
                        scurrent_month = Integer.toString(current_month);
                        sprevious_year = scurrent_year = Integer.toString(year);
                        sprevious_date = Integer.toString(admission_date);
                        scurrent_date = Integer.toString(date_cur);
                    }
                    else if (current_month == 10)
                    {
                        sprevious_month = "0"+Integer.toString(current_month - 1);
                        scurrent_month = Integer.toString(current_month);
                        sprevious_year = scurrent_year = Integer.toString(year);
                        sprevious_date = Integer.toString(admission_date);
                        scurrent_date = Integer.toString(date_cur);
                    }
                    else
                    {
                        sprevious_month = "0"+Integer.toString(current_month - 1);
                        scurrent_month = "0"+Integer.toString(current_month);
                        sprevious_year = scurrent_year = Integer.toString(year);
                        sprevious_date = Integer.toString(admission_date);
                        scurrent_date = Integer.toString(date_cur);
                    }

                    try {                              
                        ps = con.prepareStatement("select COUNT(Marks) as testPassed from WeeklyTestTable where (Date_of_Entry between '"+sprevious_year+"-"+sprevious_month+"-"+sprevious_date+"' and '"+scurrent_year+"-"+scurrent_month+"-"+scurrent_date+"') and Roll_No="+Croll.getSelectedItem()+" and Class='"+Cclass.getSelectedItem()+"' and(Marks >= 5)");
                        rs = ps.executeQuery();
                        while (rs.next()) {
                        test_passed = rs.getInt(1);               
                        }
                    }
                    catch (SQLException ex) {
                        JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
                    }

                    if (fee_package.equals("Fixed"))
                    {                   
                        Tcalfee.setText(Tfee.getText());
                        Ttestpassed.setText("Not Required");
                    }
                    else
                    {
                        Tcalfee.setText(Integer.toString(Integer.parseInt(Tfee.getText()) - (test_passed * 50)));
                        Ttestpassed.setText(Integer.toString(test_passed));
                    }
                    
                    if(check_previous_data == 1)
                    {
                        try {              
                    ps = con.prepareStatement("select Fee_Paid from Fee_Info where Roll_No ="+Croll.getSelectedItem()+" and Class='"+Cclass.getSelectedItem()+"' and Month(Date_of_Entry) = "+scurrent_month+" and Year(Date_of_Entry) = "+scurrent_year);
                    rs = ps.executeQuery();
                    while (rs.next()) {
                            Tpaidamount.setText(rs.getString(1));
                        }
                    }
                    catch (SQLException ex) {
                        JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
                    }
                    }

                
                }
            }

    }//GEN-LAST:event_DatePropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FeeRecieptFram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FeeRecieptFram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FeeRecieptFram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FeeRecieptFram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FeeRecieptFram dialog = new FeeRecieptFram(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Bprint;
    private javax.swing.JComboBox<String> Cclass;
    private javax.swing.JComboBox<String> Croll;
    private com.toedter.calendar.JDateChooser Date;
    private javax.swing.JLabel Lclass;
    private javax.swing.JLabel Ldate;
    private javax.swing.JLabel Lfee;
    private javax.swing.JLabel Lfeepaid;
    private javax.swing.JLabel Lname;
    private javax.swing.JLabel Lpayment;
    private javax.swing.JLabel Lroll;
    private javax.swing.JTextField Tcalfee;
    private javax.swing.JTextField Tfee;
    private javax.swing.JTextField Tname;
    private javax.swing.JTextField Tpaidamount;
    private javax.swing.JTextField Ttestpassed;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    private void setEditable(boolean b) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
