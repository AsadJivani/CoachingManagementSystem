/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MainPackage;


import static MainPackage.Print_MonthlyResult.getOrdinalFor;
import java.awt.Color;
import java.awt.GridBagLayout;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Vector;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author asadj
 */
public class View_monthlyresult extends javax.swing.JDialog {

    /**
     * Creates new form View_monthlyresult
     */
      public Connection conn() {
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = "jdbc:sqlserver://localhost:49172;"
                    + "databaseName=sscc;user=sa;password=sa9";
            return DriverManager.getConnection(url);
        } catch (SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, "An error occured while Connecting to Database.");
        }
        return null;
    }
   String[] str = {"January",      
   "February",
   "March",        
   "April",        
   "May",          
   "June",         
   "July",         
   "August",       
   "September",    
   "October",      
   "November",     
   "December"};

Connection con;
PreparedStatement ps;
ResultSet rs;
int numberoftest;
int noofstudents;
Vector<String>header;
Vector<Vector<String>> total=new Vector<Vector<String>>();
public static JPanel Monthly_Result_panel = new JPanel(new GridBagLayout());
    public View_monthlyresult(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        header= new Vector<String>();
        header.add("Roll No.");
        header.add("Name");
        header.add("Class");
        header.add("Month");
        header.add("Obtained Marks ");       
        header.add("Total Marks");
        header.add("Rank");
        header.add("Percentage");
        try{
            con=conn();
        }
        catch(Exception ex ){
            JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MonthResult = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        GradeReslut_view = new javax.swing.JComboBox();
        Month_result_view = new javax.swing.JComboBox();
        View = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        MonthResult.setBackground(new java.awt.Color(255, 255, 255));

        jLabel13.setFont(new java.awt.Font("Nirmala UI Semilight", 0, 14)); // NOI18N
        jLabel13.setText("Class:");

        jLabel14.setFont(new java.awt.Font("Nirmala UI Semilight", 0, 14)); // NOI18N
        jLabel14.setText("Month:");

        GradeReslut_view.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "IX-A", "X-A", "X-B", "XI-A", "XI-B", "XII-A", "XI-Commerce", "XII-Commerce", "B.com-I", "B.com-II" }));
        GradeReslut_view.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                GradeReslut_viewItemStateChanged(evt);
            }
        });

        View.setText("View");
        View.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MonthResultLayout = new javax.swing.GroupLayout(MonthResult);
        MonthResult.setLayout(MonthResultLayout);
        MonthResultLayout.setHorizontalGroup(
            MonthResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MonthResultLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MonthResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(View, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(MonthResultLayout.createSequentialGroup()
                        .addGroup(MonthResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(MonthResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(GradeReslut_view, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Month_result_view, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        MonthResultLayout.setVerticalGroup(
            MonthResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MonthResultLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MonthResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addGroup(MonthResultLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(GradeReslut_view, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(MonthResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addGroup(MonthResultLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(Month_result_view, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(View, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MonthResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MonthResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GradeReslut_viewItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_GradeReslut_viewItemStateChanged
        Month_result_view.removeAllItems();
        try{
            ps=con.prepareStatement("select DISTINCT month(Date_of_Entry),year(Date_of_Entry) from WeeklyTestTable where Class='"+GradeReslut_view.getSelectedItem()+"'");
            rs=ps.executeQuery();
            while(rs.next()){
                Month_result_view.addItem(str[rs.getInt(1)-1]);
            }
        }
        catch(SQLException ex){
        }
    }//GEN-LAST:event_GradeReslut_viewItemStateChanged

    private void ViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewActionPerformed

           if (Month_result_view.getItemCount() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Please Select Appropriate Month");
        } else {
            int index = Arrays.asList(str).indexOf(Month_result_view.getSelectedItem());
//            System.out.println(index);

            try {

                ps = con.prepareStatement("select Count(DISTINCT Date_of_Entry) from WeeklyTestTable where Class='" + GradeReslut_view.getSelectedItem() + "' AND month(Date_of_Entry)=" + (index + 1) + "");
                rs = ps.executeQuery();
                while (rs.next()) {
                    numberoftest = rs.getInt(1);
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());

            }

            

            int totalmarks = 15 * numberoftest;


       
            //for no of students
            try {

                ps = con.prepareStatement("select count(Name) from Basic_info where class='" + GradeReslut_view.getSelectedItem() + "'");
                rs = ps.executeQuery();
                while (rs.next()) {

                    noofstudents = rs.getInt(1);

                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
            }

            ///now calculating final month marks and inserting it
            float totalmarksobtained = 0;
            String name = "";
            int roll_no = 0;

//        getting markstotal
            for (int i = 1; i <= noofstudents; i++) {

                //first get roll no then use it
                try {
                    /**
                     * query logic OFFSET: Specifies the number of rows to skip
                     * before it starts to return rows from the query
                     * expression.
                     *
                     * FETCH NEXT: Specifies the number of rows to return after
                     * the OFFSET clause has been processed. *
                     *
                     */
                    String querry=";WITH Results_CTE AS (SELECT Roll_No,ROW_NUMBER() OVER (ORDER BY Roll_No ASC ) AS RowNum From Basic_info  where class='"+GradeReslut_view.getSelectedItem()+"') select Roll_No from Results_CTE where RowNum="+i+"";
                    ps = con.prepareStatement(querry);
                    rs = ps.executeQuery();
                    while (rs.next()) {
                        roll_no = rs.getInt(1);

                    }

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
                }

                //////getting name 
                try {

                    ps = con.prepareStatement("select Name from Basic_info where Roll_No='" + roll_no + "' AND class='" + GradeReslut_view.getSelectedItem() + "'");
                    rs = ps.executeQuery();
                    while (rs.next()) {
                        name = rs.getString(1);

                    }

                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
                }

                //totalmarksobtain
                try {

                    ps = con.prepareStatement("select sum(Marks) from WeeklyTestTable where Roll_No='" + roll_no + "' AND class='" + GradeReslut_view.getSelectedItem() + "' AND month(Date_of_Entry)=" + (index + 1) + "");
                    rs = ps.executeQuery();
                    while (rs.next()) {
                        totalmarksobtained = rs.getFloat(1);
                        
                    }

                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
                }

                System.out.println(totalmarksobtained);
//        JOptionPane.showMessageDialog(rootPane, roll_no+name+totalmarksobtained);
                String insert = "Insert into Monthly_Result(Roll_No,Class,Name,Month,Marks_obtain,Total_marks)"
                        + "Values(" + roll_no + ",'" + GradeReslut_view.getSelectedItem() + "','" + name + "','" + Month_result_view.getSelectedItem() + "'," + totalmarksobtained + "," + totalmarks + ")";
                String update = "update Monthly_Result set Marks_obtain=" + totalmarksobtained + ",Total_marks=" + totalmarks + " where Class ='" + GradeReslut_view.getSelectedItem() + "' AND Roll_No=" + roll_no + "AND Month='" + Month_result_view.getSelectedItem() + "'";

                String mainquery
                        = "IF (NOT EXISTS(SELECT * FROM Monthly_Result WHERE Name='" + name + "' AND Class ='" + GradeReslut_view.getSelectedItem() + "' AND Month='" + Month_result_view.getSelectedItem() + "'))"
                        + "BEGIN\n"
                        + insert + "\n"
                        + "END\n"
                        + "ELSE\n"
                        + "BEGIN\n"
                        + update + "\n"
                        + "END";

                try {
                    ps = con.prepareStatement(mainquery);
                    ps.executeUpdate();

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
                }

            }

            ////for calculating percentage anotherloop
            float monthmarks = 0;
            float percentage;
            for (int i = 1; i <= noofstudents; i++) {

                ///////geting highst mark in descending
                try {
                    ////////////query logic
                    /**
                     * OFFSET: Specifies the number of rows to skip before it
                     * starts to return rows from the query expression.
                     *
                     * FETCH NEXT: Specifies the number of rows to return after
                     * the OFFSET clause has been processed. *
                     *
                     */
                    ps = con.prepareStatement(";WITH Results_CTE AS (SELECT Marks_obtain,ROW_NUMBER() OVER (ORDER BY Marks_obtain DESC ) AS RowNum From Monthly_Result  where class='"+GradeReslut_view.getSelectedItem()+"' AND Month='"+Month_result_view.getSelectedItem()+"') select Marks_obtain from Results_CTE where RowNum="+i+"");
                    rs = ps.executeQuery();
                    while (rs.next()) {
                        monthmarks = rs.getFloat(1);

                    }

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
                }

                ///geting name
                try {

                    ps = con.prepareStatement(";WITH Results_CTE AS (SELECT Name,ROW_NUMBER() OVER (ORDER BY Marks_obtain DESC ) AS RowNum From Monthly_Result  where class='"+GradeReslut_view.getSelectedItem()+"' AND Month='"+Month_result_view.getSelectedItem()+"') select Name from Results_CTE where RowNum="+i+"");
                    rs = ps.executeQuery();
                    while (rs.next()) {
                        name = rs.getString(1);

                    }

                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
                }


                percentage = monthmarks * 100 / totalmarks;
                 
                try {
                    String Rank = i + getOrdinalFor(i);
                    ps = con.prepareStatement("update Monthly_Result set percentage=" + String.format("%.2f", percentage)+ ", rank='" + Rank + "' where Marks_obtain=" + monthmarks + " AND Name='" + name + "' AND Class='" + GradeReslut_view.getSelectedItem() + "' AND Month='" + Month_result_view.getSelectedItem() + "'");
                    ps.executeUpdate();

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"error");
                }

            }

            this.setVisible(false);
        
        

        
        
        
        
        
        
        
        
        ////////geting view
        
        
        
        
        
        
        
    try{
        String querry="select * from Monthly_Result where Class='"+GradeReslut_view.getSelectedItem()+"' AND Month='"+Month_result_view.getSelectedItem()+"' ORDER BY Marks_obtain DESC";
        ps=con.prepareStatement(querry);
        rs=ps.executeQuery();
            while (rs.next()) {        
          Vector<String>data=new Vector<String>();
            data.add(rs.getString(1));
            data.add(rs.getString(2));
            data.add(rs.getString(3));
            data.add(rs.getString(4));
            data.add(rs.getString(5));
            data.add(rs.getString(6));
            data.add(rs.getString(7));
            data.add(String.format("%.2f", rs.getFloat(8))+"%");
            total.add(data);
            }
 

            
            
            
            
            
           Menu.Monthy_result_table.setModel(new DefaultTableModel(
           total,header)
            {
            public boolean isCellEditable(int row ,int col){
            return false;
            }
            
          
            
            }
                   
          
           
           
           
           );
        }
        catch(SQLException ex){
        JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
        }
            
            
Menu.Monthy_result_table.setRowHeight(25);          
Menu.Monthy_result_table.getColumnModel().getColumn(0).setMaxWidth(50);
Menu.Monthy_result_table.getColumnModel().getColumn(0).setMinWidth(50);
Menu.Monthy_result_table.getColumnModel().getColumn(1).setMaxWidth(180);
Menu.Monthy_result_table.getColumnModel().getColumn(1).setMinWidth(180);
Menu.Monthy_result_table.getColumnModel().getColumn(2).setMaxWidth(80);
Menu.Monthy_result_table.getColumnModel().getColumn(2).setMinWidth(80);
Menu.Monthy_result_table.getColumnModel().getColumn(3).setMaxWidth(100);
Menu.Monthy_result_table.getColumnModel().getColumn(3).setMinWidth(100);
Menu.Monthy_result_table.getColumnModel().getColumn(4).setMaxWidth(100);
Menu.Monthy_result_table.getColumnModel().getColumn(4).setMinWidth(100);
Menu.Monthy_result_table.getColumnModel().getColumn(5).setMaxWidth(100);
Menu.Monthy_result_table.getColumnModel().getColumn(5).setMinWidth(100);
Menu.Monthy_result_table.getColumnModel().getColumn(6).setMaxWidth(100);
Menu.Monthy_result_table.getColumnModel().getColumn(6).setMinWidth(100);
Menu.Monthy_result_table.getColumnModel().getColumn(7).setMaxWidth(100);
Menu.Monthy_result_table.getColumnModel().getColumn(7).setMinWidth(100);
Menu.Monthy_result_table.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
            
        



Monthly_Result_panel.setPreferredSize(Menu.Tab.getSize());
Monthly_Result_panel.setBackground(Color.WHITE);
Monthly_Result_panel.add(Menu.Monthly_Result);
Monthly_Result_panel.setName("Monthly Result");
Menu.Tab.setVisible(true);
Menu.Tab.add(Monthly_Result_panel);

Menu.Tab.setSelectedComponent(Monthly_Result_panel);
Icon icon = new ImageIcon(getClass().getResource("/Images/details.png"));
Menu.Tab.setIconAt(Menu.Tab.getSelectedIndex(), icon);
        
        
        
this.setVisible(false);
    }
           
           

    }//GEN-LAST:event_ViewActionPerformed

   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View_monthlyresult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View_monthlyresult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View_monthlyresult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View_monthlyresult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                View_monthlyresult dialog = new View_monthlyresult(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JComboBox GradeReslut_view;
    private javax.swing.JPanel MonthResult;
    public javax.swing.JComboBox Month_result_view;
    private javax.swing.JButton View;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    // End of variables declaration//GEN-END:variables
}
